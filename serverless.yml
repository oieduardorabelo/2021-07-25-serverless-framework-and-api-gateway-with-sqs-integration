service: apigateway-sqs-dynamodb

frameworkVersion: 2.52.1

plugins:
  - serverless-esbuild
  - serverless-apigateway-service-proxy

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-2
  logs:
    restApi: true
  environment:
    FORM_POST_TABLE_NAME: !Ref FormPostTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
      Resource: !GetAtt FormPostTable.Arn

custom:
  apiGatewayServiceProxies:
    - sqs:
        path: /form
        method: post
        queueName: !GetAtt SQSQueueFormPost.QueueName
        cors: true
        request:
          template:
            application/json: |-
              #set ($body = $util.parseJson($input.body))
              Action=SendMessage##
              &MessageAttribute.1.Name=$util.urlEncode("requestId")##
              &MessageAttribute.1.Value.DataType=String##
              &MessageAttribute.1.Value.StringValue=$util.urlEncode($context.requestId)##
              &MessageBody=$util.urlEncode($input.body)
        response:
          template:
            success: '{ "ok": true, "message": "Message accepted", "requestId": "$context.requestId" }'
            clientError: '{ "ok": false, "message": "There is an error in your request", "requestId": "$context.requestId" }'
            serverError: '{ "ok": false, "message": "There was an error handling your request", "requestId": "$context.requestId" }'

functions:
  SQSWorker:
    handler: ./handlers/sqs-worker.handler
    reservedConcurrency: 10 # maximum number of lambdas to connect with downstream database
    events:
      - sqs:
          arn: !GetAtt SQSQueueFormPost.Arn
          batchSize: 5
          maximumBatchingWindow: 30

resources:
  extensions:
    ApiGatewayMethodFormPost:
        Properties:
          RequestModels:
            application/json: !Ref ApiGatewayRestMethodModel
          RequestValidatorId: !Ref ApiGatewayRequestValidator

  Resources:
    SQSQueueFormPost:
      Type: 'AWS::SQS::Queue'

    FormPostTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ApiGatewayRestMethodModel:
        Type: AWS::ApiGateway::Model
        Properties:
          ContentType: application/json
          Description: "FormPostModel"
          RestApiId: !Ref ApiGatewayRestApi
          Schema: ${file(./apigateway-schemas/form-post.json)}

    ApiGatewayRequestValidator:
        Type: AWS::ApiGateway::RequestValidator
        Properties:
          Name: FormPostValidator
          RestApiId: !Ref ApiGatewayRestApi
          ValidateRequestBody: true
          ValidateRequestParameters: false

    GatewayResponseBadRequestBody:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "ok": false, "message": "Message payload invalid", "requestId": "$context.requestId" }'
        ResponseType: BAD_REQUEST_BODY
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '422'

    GatewayResponseUnsupportedMediaType:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "ok": false, "message": "Content-Type not supported", "requestId": "$context.requestId" }'
        ResponseType: UNSUPPORTED_MEDIA_TYPE
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '415'
